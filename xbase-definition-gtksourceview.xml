<?xml version="1.0" encoding="UTF-8"?>
<!--
xBase Language Definition for gtksourceview 
Copyright (C) 2010 John Murowaniecki <jmurowaniecki@gmail.com>

This library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<language id="clipper" _name="Clipper" version="2.0" _section="Sources">

	<metadata>
		<property name="mimetypes">text/x-clipper</property>
		<property name="globs">*.prw;*.Prw;*.PRw;*.PRW;*.PrW;*.prW;*.pRw;*.prg;*.Prg;*.PRg;*.PrG;*.PRG;*.prG;*.pRg;*.ppo;*.Ppo;*.PPo;*.PPO;*.prx;*.PRX;*.Prx;*.PRx;*.pRx;*.prX;*.pRX</property>
		<property name="line-comment-start">//</property>
		<property name="block-comment-start">/*</property>
		<property name="block-comment-end">*/</property>
	</metadata>

	<styles>
		<style id="comment"				_name="Comment"			map-to="def:comment"/>
		<style id="error"				_name="Error"			map-to="def:error"/>
		<style id="string"				_name="String"			map-to="def:string"/>
		<style id="preprocessor"		_name="Preprocessor"	map-to="def:preprocessor"/>
		<style id="common-defines"		_name="Common Defines"	map-to="def:special-constant"/>
		<style id="included-file"		_name="Included File"	map-to="def:string"/>
		<style id="char"				_name="Character"		map-to="def:character"/>
		<style id="keyword"				_name="Keyword"			map-to="def:keyword"/>
		<style id="type"				_name="Data Type"		map-to="def:type"/>
		<style id="storage-class"		_name="Storage Class"	map-to="def:type"/>
		<style id="decimal"				_name="Decimal number"	map-to="def:decimal"/>

		<style id="clipper-operator"	_name="Logic Operator"	map-to="clipper:clipper-operator"/>
		<style id="clipper-pointer"		_name="Pointer"			map-to="clipper:clipper-pointer"/>
		<style id="clipper-area"		_name="Work area"		map-to="clipper:clipper-area"/>
		<style id="clipper-type-array"	_name="Logic Operator"	map-to="clipper:clipper-type-array"/>
	</styles>

	<default-regex-options case-sensitive="false"/>

	<definitions>
		<context id="clipper" class="no-spell-check">
			<include>

				<context id="clipper-operator" style-ref="clipper-operator" class="clipper-operator">
					<match extended="true">[.][A-Za-z]+[.]</match>
				</context>
				
				<context id="clipper-pointer" style-ref="clipper-pointer" class="clipper-pointer">
					<match extended="true">[@][A-Za-z0-9]+</match>
				</context>
				
				<context id="clipper-area" style-ref="clipper-area" class="clipper-area">
					<match extended="true">[A-Za-z0-9]+[-][&gt;]</match>
				</context>

				<context ref="gtk-doc:inline-docs-section"/>

				<context id="comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
					<start>//</start>
					<include>
						<context ref="def:in-line-comment"/>
					</include>
				</context>

				<context id="comment-multiline" style-ref="comment" class="comment" class-disabled="no-spell-check">
					<start>/\*</start>
					<end>\*/</end>
					<include>
						<context ref="def:in-comment"/>
					</include>
				</context>

				<context id="close-comment-outside-comment" style-ref="error">
					<match>\*/(?!\*)</match>
				</context>

				<define-regex id="preproc-start">^\s*#\s*</define-regex>

				<context id="if0-comment" style-ref="comment">
					<start>\%{preproc-start}if\b\s*0\b</start>
					<end>\%{preproc-start}(endif|else|elif)\b</end>
					<include>
						<context id="if-in-if0">
							<start>\%{preproc-start}if(n?def)?\b</start>
							<end>\%{preproc-start}endif\b</end>
							<include>
								<context ref="if-in-if0"/>
								<context ref="def:in-comment"/>
							</include>
						</context>
						<context ref="def:in-comment"/>
					</include>
				</context>

				<context id="include" style-ref="preprocessor">
					<match extended="true">
						\%{preproc-start}
						(include|import)\s*
						(".*?"|&lt;.*&gt;)
					</match>
					<include>
						<context id="included-file" sub-pattern="2" style-ref="included-file"/>
					</include>
				</context>

				<context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
					<start extended="true">
						\%{preproc-start}
						(define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
						\b
					</start>
					<include>
						<context ref="def:line-continue" ignore-style="true"/>
						<context ref="string" ignore-style="true"/>
						<context ref="comment"/>
						<context ref="comment-multiline"/>
					</include>
				</context>

				<context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
					<start>L?"</start>
					<end>"</end>
					<include>
						<context ref="def:line-continue"/>
					</include>
				</context>

				<context id="decimal" style-ref="decimal">
					<match extended="true">
						(?&lt;![\w\.])
						[0-9]+[uUlL]*
						(?![\w\.])
					</match>
				</context>

				<context id="onomedafuncao" style-ref="decimal">
					<match extended="true">
						\s*(FUNCTION|PROCEDURE)\s*([A-Za-z0-9_]*)
					</match>
				</context>

				<context id="clipper-type-array" style-ref="clipper-type-array">
					<match extended="true" case-sensitive="true">
						(-[a-zA-Z0-9_]*|\s*)[a]([A-Z][A-Za-z0-9_]*)(-[\(]|\s*)
					</match>
				</context>

				<context id="keywords" style-ref="keyword" class="keyword">
					<keyword>do</keyword>
					<keyword>while</keyword>
					<keyword>enddo</keyword>
					<keyword>case</keyword>
					<keyword>endcase</keyword>
					<keyword>select</keyword>
					<keyword>otherwise</keyword>
					<keyword>if</keyword>
					<keyword>iif</keyword>
					<keyword>else</keyword>
					<keyword>elseif</keyword>
					<keyword>endif</keyword>
					<keyword>end</keyword>
					<keyword>for</keyword>
					<keyword>to</keyword>
					<keyword>step</keyword>
					<keyword>next</keyword>
					<keyword>loop</keyword>
					<keyword>break</keyword>
					<keyword>static</keyword>
					<keyword>user</keyword>
					<keyword>function</keyword>
					<keyword>procedure</keyword>
					<keyword>return</keyword>
					<keyword>local</keyword>
					<keyword>private</keyword>
					<keyword>default</keyword>

					<keyword>say</keyword>
					<keyword>get</keyword>
					<keyword>button</keyword>
					<keyword>object</keyword>
					<keyword>replace</keyword>
					<keyword>with</keyword>
					<keyword>size</keyword>
					<keyword>when</keyword>

					<keyword>action</keyword>
					<keyword>dialog</keyword>
					<keyword>title</keyword>
					<keyword>msdialog</keyword>
					<keyword>from</keyword>
					<keyword>pixel</keyword>
					<keyword>of</keyword>

					<keyword>activate</keyword>
					<keyword>centered</keyword>
					<keyword>valid</keyword>
					<keyword>define</keyword>
					<keyword>type</keyword>
				</context>

				<context id="types" style-ref="type" class="type">
					<keyword>str</keyword>
					<keyword>int</keyword>
					<keyword>chr</keyword>
					<keyword>dtos</keyword>
					<keyword>stod</keyword>
					<keyword>date</keyword>
					<keyword>array</keyword>
					<keyword>float</keyword>
					<keyword>double</keyword>
					<keyword>val</keyword>
					<keyword>empty</keyword>
					<keyword>valtype</keyword>
				</context>

				<context id="storage-class" style-ref="storage-class" class="storage-class">
					<keyword>auto</keyword>
					<keyword>const</keyword>
					<keyword>extern</keyword>
					<keyword>inline</keyword>
					<keyword>register</keyword>
					<keyword>restrict</keyword>
					<keyword>static</keyword>
					<keyword>volatile</keyword>
				</context>

				<context id="common-defines" style-ref="common-defines" class="common-defines">
					<keyword>nil</keyword>
				</context>
				
			</include>
			
		</context>
		
	</definitions>
	
</language>
